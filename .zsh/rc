# vim: filetype=zsh
# Florian Wallners zshrc

if [ -d ${HOME}/bin ]; then
    PATH=${HOME}/bin:$PATH
fi

if [ -d "${HOME}/.local/bin" ]; then
    PATH=${HOME}/.local/bin:${PATH}
fi

# Export solarized colors
export _COL_SOLARIZED_BACKGROUND=230
export _COL_SOLARIZED_BACKGROUND_HIGHLIGHT=254
export _COL_SOLARIZED_PRIMARY_CONTENT=66
export _COL_SOLARIZED_SECONDARY_CONTENT=247
export _COL_SOLARIZED_EMPHASIZED_CONTENT=242

export _COL_SOLARIZED_RED=1
export _COL_SOLARIZED_GREEN=2
export _COL_SOLARIZED_YELLOW=3
export _COL_SOLARIZED_BLUE=4
export _COL_SOLARIZED_MAGENTA=5
export _COL_SOLARIZED_CYAN=6
export _COL_SOLARIZED_ORANGE=9
export _COL_SOLARIZED_VIOLET=13


export HISTSIZE=6144
export SAVEHIST=4096
export HISTFILE=$HOME/.zsh/history

# keybindgs
bindkey -e                  # emacs key bindings
bindkey ' ' magic-space     # also do history expansion on space
bindkey "\e[3~" delete-char # make delete work correctly

# The options. Listed  here are only those that differ from the defaults.
# They are ordered alphabetically not by subject.
setopt ALWAYS_TO_END        # Move to end of word after completion
setopt AUTO_CD              # If an unknown command is a directory cd into it.
setopt BRACE_CCL            # Expand expressions in braces
setopt COMPLETE_IN_WORD     # Don't move to end of word when completeing.
setopt CORRECT              # Try auto correction of commands
setopt EQUALS               # Filename expansion on right hand side of '='
setopt HIST_IGNORE_ALL_DUPS # Remove all duplicates from the history
setopt HIST_NO_STORE        # Don't store history in the history
setopt HIST_REDUCE_BLANKS   # Remove all superflous blanks from history entries
setopt SHARE_HISTORY        # History is shared between shells.
setopt LONG_LIST_JOBS       # Display jobs in long list formats
setopt MARK_DIRS            # Mark a generated filename as directory '/'
setopt NUMERIC_GLOB_SORT    # Sort generated numerical file names numerical
setopt PUSHD_TO_HOME        # empty pushd pushes '~' onto stack

export EDITOR=vim
export PAGER=less
export LESS='-deFgiMRSX -P?fFile %f:stdin. ?m(%i of %m) :.line %l ?Lof %L:.?p (%p\%):.'
export LESSCHARSET=utf-8   # Is this still necessary?
# Format man pages for a wigth of 80 col no matter how wide the terminal
export MANWIDTH=80
# Use bat as manual pager
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANROFFOPT="-c"

# In the process of switching to bat, but for the time beiing...
if [ -f /usr/share/source-highlight/src-hilite-lesspipe.sh ]; then
    LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s"
fi

export BAT_THEME="Solarized (dark)"

# Don't ignore leading dots when sorting.
export LC_COLLATE="C"
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8

# Set up aliases
alias mv='nocorrect mv'    # no spelling correction on mv
alias cp='nocorrect cp'    # no spelling correction on cp
alias mkdir='nocorrect mkdir' # no spelling correction on mkdir
alias ll='ls -l'
alias la='ls -a'
alias cd..="cd .."
alias \#='sudo'
alias doch='sudo $(fc -ln -1)'
alias cat='bat -p'
alias xps='ps aucx | head -1; ps aucx | grep -i '
alias https='http --default-scheme=https'
alias xc='xclip -i -selection clipboard'

# Completition control

if [ -d "${HOME}/.zsh/completion" ]; then
    fpath=(${HOME}/.zsh/completion/ $fpath)
fi

autoload -Uz compinit && compinit -i
autoload -U +X bashcompinit && bashcompinit

# initialize antidote
source ${HOME}/.zsh/antidote/antidote.zsh
bundlefile=${HOME}/.zsh/plugins.txt
zstyle ':antidote:bundle' file $bundlefile
staticfile=${HOME}/.zsh/plugins.zsh
zstyle ':antidote:static' file $staticfile
antidote load

# Completion caching
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path $HOME/.zsh/cache/$HOST

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# activate menu selection
zstyle ':completion:*' menu select

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Don't complete backup files as executables
zstyle ':completion:*:complete:-command-::commands' ignored-patterns '*\~'

# Separate matches into groups
zstyle ':completion:*:matches' group 'yes'

# Describe options in full
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'

# enable fzf
# # FZF Colors: stolen from https://gitlab.com/psicho/dotfiles and used with love


COL_FZF_HL='#859900'
COL_FZF_HL_PLUS='#859900'
COL_FZF_POINTER=${_COL_SOLARIZED_BLUE}:regular
COL_FZF_MARKER=${_COL_SOLARIZED_GREEN}:regular
COL_FZF_FG_PLUS=${_COL_SOLARIZED_EMPHASIZED_CONTENT}:regular
COL_FZF_BG_PLUS=${_COL_SOLARIZED_BACKGROUND_HIGHLIGHT}:regular
COL_FZF_HEADER=${_COL_SOLARIZED_BLUE}:regular
FZF_TAB_DEFAULT_COLOR=$'\e['"38;5;${_COL_SOLARIZED_PRIMARY_CONTENT}m"
export FZF_TAB_GROUP_COLORS=(
    $'\e['"38;5;${_COL_SOLARIZED_RED}m" \
    $'\e['"38;5;${_COL_SOLARIZED_GREEN}m" \
    $'\e['"38;5;${_COL_SOLARIZED_YELLOW}m" \
    $'\e['"38;5;${_COL_SOLARIZED_BLUE}m" \
    $'\e['"38;5;${_COL_SOLARIZED_MAGENTA}m" \
    $'\e['"38;5;${_COL_SOLARIZED_CYAN}m" \
    $'\e['"38;5;${_COL_SOLARIZED_ORANGE}m" \
    $'\e['"38;5;${_COL_SOLARIZED_VIOLET}m" \
    $'\e['"38;2;110;195;121m" \
    $'\e['"38;2;159;195;110m" \
    $'\e['"38;2;195;173;110m"
)

export FZF_TMUX=1
export FZF_TMUX_OPTS="-p60%,40%"
export FZF_DEFAULT_OPTS="--layout=reverse-list --no-separator --border=rounded \
                         --info=inline -m --prompt='▶' --pointer='→' \
                         --marker='♡ '\
                         --color 'hl:${COL_FZF_HL},hl+:${COL_FZF_HL_PLUS}'\
                         --color 'pointer:${COL_FZF_POINTER}'\
                         --color 'marker:${COL_FZF_MARKER},bg+:${COL_FZF_BG_PLUS}'\
                         --color 'header:${COL_FZF_HEADER},fg+:${COL_FZF_FG_PLUS}'"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --ignore-file "$HOME/.gitexcludes" \
                               --exclude .git --strip-cwd-prefix'
export FZF_CTRL_T_COMMAND=${FZF_DEFAULT_COMMAND}
export FZF_CTRL_T_OPTS="${FZF_DEFAULT_OPTS} --preview 'bat --style=numbers --color=always {} | head -500'"
export FZF_COMPLETION_OPTS='--border --info=inline'

bindkey '^I' fzf_completion

source /usr/share/fzf/shell/key-bindings.zsh

# Searchable display strings
zstyle ':completion:*' fzf-search-display true
# disable sort when completing 'git checkout'
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# give a preview of commandline arguments when completing `kill`
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
# preview when completing env vars (note: only works for exported variables)
# eval twice, first to unescape the string, second to expand the $variable
zstyle ':completion::*:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-completion-opts --preview='eval eval echo {1}'
# preview a `git status` when completing git add
zstyle ':completion::*:git::git,add,*' fzf-completion-opts --preview='git -c color.status=always status --short'


if [ $(which terraform > /dev/null 2>&1) ]; then
    complete -o nospace -C /usr/bin/terraform terraform
fi

if [ $(which kubectl > /dev/null 2>&1) ]; then
    source <(kubectl completion zsh)
fi

if [ $(which minikube > /dev/null 2>&1) ]; then
    source <(minikube completion zsh)
fi

if [ $(which helm > /dev/null 2>&1) ]; then
    source <(helm completion zsh)
fi

if [ $(which k3d > /dev/null 2>&1) ]; then
    source <(k3d completion zsh)
fi

if [ $(which stern > /dev/null 2>&1) ]; then
    source <(stern --completion zsh)
fi

if [ $(which zoxide) ]; then
    eval "$(zoxide init zsh)"
fi

if [ -f /usr/lib64/google-cloud-sdk/completion.zsh.inc ]; then
    source "/usr/lib64/google-cloud-sdk/completion.zsh.inc"
fi

if [ -f $HOME/.ocd.sh ]; then
    source "$HOME/.ocd.sh"
fi

case $TERM in
    xterm*)
        precmd () {print -Pn "\e]0;%n@%m: %~\a"}
        ;;
esac

eval "$(direnv hook zsh)"

# Removing duplicate entries from $PATH
typeset -U PATH

